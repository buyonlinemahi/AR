<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  -->
<configuration>
  <configSections>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    <sectionGroup name="dotNetOpenAuth" type="DotNetOpenAuth.Configuration.DotNetOpenAuthSection, DotNetOpenAuth.Core">
      <section name="messaging" type="DotNetOpenAuth.Configuration.MessagingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
      <section name="reporting" type="DotNetOpenAuth.Configuration.ReportingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
      <section name="openid" type="DotNetOpenAuth.Configuration.OpenIdElement, DotNetOpenAuth.OpenId" requirePermission="false" allowLocation="true" />
      <section name="oauth" type="DotNetOpenAuth.Configuration.OAuthElement, DotNetOpenAuth.OAuth" requirePermission="false" allowLocation="true" />
    </sectionGroup>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
  </configSections>
  <appSettings>
    <add key="StoragePath" value="/Storage"/>
    <add key="BarCodeKey" value="6307-4632-20B8-E911-0AA"/>
    <add key="BarCodeKeyName" value="dsharma@vsaindia.com"/>
    <add key="AfterInvoiceDate" value="2016-12-06"/>
    <!--*******YYYY-MM-DD******-->
  </appSettings>
  <connectionStrings>
    <!--<add name="LMGEDIDBContext" connectionString="Data Source=prodsql1;Initial Catalog=AR;User Id=saFull;Password=LwyVZ6?$*h;Connect Timeout=360000;MultipleActiveResultSets=True;" providerName="System.Data.SqlClient" />-->
    <add name="LMGEDIDBContext" connectionString="Data Source=VSA-SAT-DB1\SQL2K14;Initial Catalog=AR;User Id=uttam;Password=uttam;Connect Timeout=36000;MultipleActiveResultSets=True;" providerName="System.Data.SqlClient" />
    <add name ="Excel03ConString"  connectionString="Provider=Microsoft.Jet.OLEDB.4.0;Data Source={0};Extended Properties='Excel 8.0;HDR=YES'"/>
    <add name ="Excel07+ConString" connectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties='Excel 8.0;HDR=YES'"/>
  </connectionStrings>

  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <typeAliases>
      <typeAlias alias="singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity"/>
    </typeAliases>
    <containers>
      <container name="">
        <types>
          <type type="Core.Base.Data.SqlServer.Factory.IContextFactory`1[[LMGEDI.Core.Data.SqlServer.LMGEDIDBContext, LMGEDI.Core.Data.SqlServer]], Core.Base.Data.SqlServer" mapTo="Core.Base.Data.SqlServer.Factory.BaseContextFactory`1[[LMGEDI.Core.Data.SqlServer.LMGEDIDBContext, LMGEDI.Core.Data.SqlServer]], Core.Base.Data.SqlServer">
            <constructor />
          </type>
          <type type="Core.Base.Data.IUnitOfWork, Core.Base.Data" mapTo="Core.Base.Data.SqlServer.BaseUnitOfWork`1[[LMGEDI.Core.Data.SqlServer.LMGEDIDBContext, LMGEDI.Core.Data.SqlServer]], Core.Base.Data.SqlServer">
          </type>
          <!--************************* Repo ******************************************************************************************************** -->
          <type type="LMGEDI.Core.Data.IUserRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.UserRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IAdjusterRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.AdjusterRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IEmployerRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.EmployerRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IFileRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.FileRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IInsurerBranchRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.InsurerBranchRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IInsurerRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.InsurerRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IInvoiceRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.InvoiceRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IDepartmentRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.DepartmentRepository, LMGEDI.Core.Data.SqlServer">
          </type>        
          <type type="LMGEDI.Core.Data.IPaymentRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.PaymentRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IPendingUploadRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.PendingUploadRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.ILienTempTableRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.LienTempTableRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IOCRRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.OCRRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IInvoiceNoteRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.InvoiceNoteRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IPaymentRefundRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.PaymentRefundRepository, LMGEDI.Core.Data.SqlServer">
          </type>


          <type type="LMGEDI.Core.Data.IInvoiceAdjustmentRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.InvoiceAdjustmentRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IICRecordDetailRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.ICRecordDetailRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.IStateRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.StateRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.ICommissionRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.CommissionRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <type type="LMGEDI.Core.Data.ICommissionPaymentRepository, LMGEDI.Core.Data" mapTo="LMGEDI.Core.Data.SqlServer.Repository.CommissionPaymentRepository, LMGEDI.Core.Data.SqlServer">
          </type>
          <!--Business Layer *****************************************************************************************************************************************************-->
          <type type="LMGEDI.Core.BL.IUser, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.UserImpl, LMGEDI.Core.BL.Implementation">
          </type>

          <type type="LMGEDIApp.Infrastructure.ApplicationServices.Contracts.IEncryption, LMGEDIApp.Infrastructure.ApplicationServices.Contracts" mapTo="LMGEDIApp.Infrastructure.Services.EncryptionService, LMGEDIApp.Infrastructure.Services">
          </type>
          <type type="LMGEDIApp.Infrastructure.ApplicationServices.Contracts.IStorageServices, LMGEDIApp.Infrastructure.ApplicationServices.Contracts" mapTo="LMGEDIApp.Infrastructure.Services.StorageServices, LMGEDIApp.Infrastructure.Services">
          </type>
          <type type="LMGEDIApp.Infrastructure.ApplicationServices.Contracts.IARCommonServices, LMGEDIApp.Infrastructure.ApplicationServices.Contracts" mapTo="LMGEDIApp.Infrastructure.Services.ARCommonServices, LMGEDIApp.Infrastructure.Services">
          </type>
          <type type="LMGEDI.Core.BL.IAdjuster, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.AdjusterImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IEmployer, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.EmployerImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IFile, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.FileImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IInsurerBranch, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.InsurerBranchImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IInsurer, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.InsurerImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IInvoice, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.InvoiceImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IDepartment, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.DepartmentImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IState, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.StateImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IPayment, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.PaymentImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IPendingUpload, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.PendingUploadImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.ILienTempTable, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.LienTempTableImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IOCR, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.OCRImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IInvoiceNote, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.InvoiceNoteImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IPaymentRefund, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.PaymentRefundImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.IState, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.StateImpl, LMGEDI.Core.BL.Implementation">
          </type>
          <type type="LMGEDI.Core.BL.ICommission, LMGEDI.Core.BL" mapTo="LMGEDI.Core.BL.Implementation.CommissionImpl, LMGEDI.Core.BL.Implementation">
          </type>
          
        </types>
      </container>
    </containers>
  </unity>

  <system.web>
    <globalization culture="en-US" enableBestFitResponseEncoding="false" fileEncoding="utf-8" requestEncoding="utf-8" responseEncoding="utf-8" responseHeaderEncoding="utf-8" uiCulture="auto"/>
    <compilation debug="true" targetFramework="4.5.1" />
    <httpRuntime targetFramework="4.5.1"  maxRequestLength="999999"
      useFullyQualifiedRedirectUrl="false"
      minFreeThreads="8"
      minLocalRequestFreeThreads="4"
      appRequestQueueLimit="100"
      enableVersionHeader="true" executionTimeout="999999" />
  </system.web>
  <system.webServer>
    <security>
      <requestFiltering>
        <requestLimits maxAllowedContentLength="1073741824" />
      </requestFiltering>
    </security>
  </system.webServer>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.5.2.14234" newVersion="1.5.2.14234" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="DotNetOpenAuth.AspNet" publicKeyToken="2780ccd10d57b246" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="DotNetOpenAuth.Core" publicKeyToken="2780ccd10d57b246" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages.Razor" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Practices.Unity" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.5.0.0" newVersion="3.5.0.0" />
      </dependentAssembly>
    </assemblyBinding>


    <!-- When targeting ASP.NET MVC 3, this assemblyBinding makes MVC 1 and 2 references relink
		     to MVC 3 so libraries such as DotNetOpenAuth that compile against MVC 1 will work with it.
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
			</dependentAssembly>
		</assemblyBinding>
		 -->
    <!-- This prevents the Windows Event Log from frequently logging that HMAC1 is being used (when the other party needs it). -->
    <legacyHMACWarning enabled="0" />
    <!-- When targeting ASP.NET MVC 3, this assemblyBinding makes MVC 1 and 2 references relink
		     to MVC 3 so libraries such as DotNetOpenAuth that compile against MVC 1 will work with it.
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
				<bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
			</dependentAssembly>
		</assemblyBinding>
		 -->
  </runtime>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
  <system.net>
    <defaultProxy enabled="true" />
    <settings>
      <!-- This setting causes .NET to check certificate revocation lists (CRL) 
			     before trusting HTTPS certificates.  But this setting tends to not 
			     be allowed in shared hosting environments. -->
      <!--<servicePointManager checkCertificateRevocationList="true"/>-->
    </settings>
  </system.net>
  <dotNetOpenAuth>
    <messaging>
      <untrustedWebRequest>
        <whitelistHosts>
          <!-- Uncomment to enable communication with localhost (should generally not activate in production!) -->
          <!--<add name="localhost" />-->
        </whitelistHosts>
      </untrustedWebRequest>
    </messaging>
    <!-- Allow DotNetOpenAuth to publish usage statistics to library authors to improve the library. -->
    <reporting enabled="true" />
    <!-- This is an optional configuration section where aspects of dotnetopenauth can be customized. -->
    <!-- For a complete set of configuration options see http://www.dotnetopenauth.net/developers/code-snippets/configuration-options/ -->
    <openid>
      <relyingParty>
        <security requireSsl="false">
          <!-- Uncomment the trustedProviders tag if your relying party should only accept positive assertions from a closed set of OpenID Providers. -->
          <!--<trustedProviders rejectAssertionsFromUntrustedProviders="true">
						<add endpoint="https://www.google.com/accounts/o8/ud" />
					</trustedProviders>-->
        </security>
        <behaviors>
          <!-- The following OPTIONAL behavior allows RPs to use SREG only, but be compatible
					     with OPs that use Attribute Exchange (in various formats). -->
          <add type="DotNetOpenAuth.OpenId.RelyingParty.Behaviors.AXFetchAsSregTransform, DotNetOpenAuth.OpenId.RelyingParty" />
        </behaviors>
      </relyingParty>
    </openid>
  </dotNetOpenAuth>
  <uri>
    <!-- The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
		     which is necessary for OpenID urls with unicode characters in the domain/host name.
		     It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. -->
    <idn enabled="All" />
    <iriParsing enabled="true" />
  </uri>
</configuration>